kotlin version: 2.1.21
error message: org.jetbrains.kotlin.backend.common.CompilationException: Back-end: Please report this problem https://kotl.in/issue
/home/nikomaru/morinoparty/MoripaFishing/api/src/main/kotlin/party/morino/moripafishing/api/model/rod/RodConfiguration.kt:7:1
Problem with `@Serializable
data class RodConfiguration {
  constructor(rodType: String, waitTimeMultiplier: Double = 1.0, bonusEffects: List<ApplyValue> = emptyList<ApplyValue>(), weatherImmunity: Boolean = false, biomeBonuses: Map<String, Double> = emptyMap<String, Double>(), displayName: String = "", lore: List<String> = emptyList<String>()) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val rodType: String
    field = rodType
    get

  val waitTimeMultiplier: Double
    field = waitTimeMultiplier
    get

  @Contextual
  val bonusEffects: List<ApplyValue>
    field = bonusEffects
    get

  val weatherImmunity: Boolean
    field = weatherImmunity
    get

  val biomeBonuses: Map<String, Double>
    field = biomeBonuses
    get

  val displayName: String
    field = displayName
    get

  val lore: List<String>
    field = lore
    get

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun serializer(): KSerializer<RodConfiguration>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $serializer : GeneratedSerializer<RodConfiguration> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override fun serialize(encoder: Encoder, value: RodConfiguration)

    override fun deserialize(decoder: Decoder): RodConfiguration

    override val descriptor: SerialDescriptor
      override get

    override fun childSerializers(): Array<KSerializer<*>>

    /* fake */ override fun typeParametersSerializers(): Array<KSerializer<*>>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

  }

  operator fun component1(): String {
    return <this>.#rodType
  }

  operator fun component2(): Double {
    return <this>.#waitTimeMultiplier
  }

  operator fun component3(): List<ApplyValue> {
    return <this>.#bonusEffects
  }

  operator fun component4(): Boolean {
    return <this>.#weatherImmunity
  }

  operator fun component5(): Map<String, Double> {
    return <this>.#biomeBonuses
  }

  operator fun component6(): String {
    return <this>.#displayName
  }

  operator fun component7(): List<String> {
    return <this>.#lore
  }

  fun copy(rodType: String = <this>.#rodType, waitTimeMultiplier: Double = <this>.#waitTimeMultiplier, bonusEffects: List<ApplyValue> = <this>.#bonusEffects, weatherImmunity: Boolean = <this>.#weatherImmunity, biomeBonuses: Map<String, Double> = <this>.#biomeBonuses, displayName: String = <this>.#displayName, lore: List<String> = <this>.#lore): RodConfiguration {
    return RodConfiguration(rodType = rodType, waitTimeMultiplier = waitTimeMultiplier, bonusEffects = bonusEffects, weatherImmunity = weatherImmunity, biomeBonuses = biomeBonuses, displayName = displayName, lore = lore)
  }

  override fun toString(): String {
    return "RodConfiguration(" + "rodType=" + <this>.#rodType + ", " + "waitTimeMultiplier=" + <this>.#waitTimeMultiplier + ", " + "bonusEffects=" + <this>.#bonusEffects + ", " + "weatherImmunity=" + <this>.#weatherImmunity + ", " + "biomeBonuses=" + <this>.#biomeBonuses + ", " + "displayName=" + <this>.#displayName + ", " + "lore=" + <this>.#lore + ")"
  }

  override fun hashCode(): Int {
    var result: Int = <this>.#rodType.hashCode()
    result = result.times(other = 31).plus(other = <this>.#waitTimeMultiplier.hashCode())
    result = result.times(other = 31).plus(other = <this>.#bonusEffects.hashCode())
    result = result.times(other = 31).plus(other = <this>.#weatherImmunity.hashCode())
    result = result.times(other = 31).plus(other = <this>.#biomeBonuses.hashCode())
    result = result.times(other = 31).plus(other = <this>.#displayName.hashCode())
    result = result.times(other = 31).plus(other = <this>.#lore.hashCode())
    return result
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is RodConfiguration -> return false
    }
    val tmp0_other_with_cast: RodConfiguration = other as RodConfiguration
    when {
      EQEQ(arg0 = <this>.#rodType, arg1 = tmp0_other_with_cast.#rodType).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#waitTimeMultiplier, arg1 = tmp0_other_with_cast.#waitTimeMultiplier).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#bonusEffects, arg1 = tmp0_other_with_cast.#bonusEffects).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#weatherImmunity, arg1 = tmp0_other_with_cast.#weatherImmunity).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#biomeBonuses, arg1 = tmp0_other_with_cast.#biomeBonuses).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#displayName, arg1 = tmp0_other_with_cast.#displayName).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#lore, arg1 = tmp0_other_with_cast.#lore).not() -> return false
    }
    return true
  }

  @JvmStatic
  internal /* static */ fun write$Self(self: RodConfiguration, output: CompositeEncoder, serialDesc: SerialDescriptor)

  internal constructor(seen0: Int, rodType: String?, waitTimeMultiplier: Double, bonusEffects: List<ApplyValue>?, weatherImmunity: Boolean, biomeBonuses: Map<String, Double>?, displayName: String?, lore: List<String>?, serializationConstructorMarker: SerializationConstructorMarker?)

}

`
Details: kotlinx.serialization compiler plugin internal error: unable to transform declaration, see cause
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:230)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:46)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitClass(IrElementVisitorVoid.kt:55)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrClass.accept(IrClass.kt:72)
	at org.jetbrains.kotlin.ir.declarations.IrFile.acceptChildren(IrFile.kt:34)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptChildrenVoid(IrVisitors.kt:19)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitElement(SerializationLoweringExtension.kt:42)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitPackageFragment(IrElementVisitorVoid.kt:187)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitPackageFragment(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:203)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:199)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrFile.accept(IrFile.kt:28)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptVoid(IrVisitors.kt:14)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt.runOnFileInOrder(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtension.generate(SerializationLoweringExtension.kt:194)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.applyIrGenerationExtensions(convertToIr.kt:472)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.runActualizationPipeline(convertToIr.kt:241)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.convertToIrAndActualize(convertToIr.kt:130)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize(convertToIr.kt:100)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize$default(convertToIr.kt:75)
	at org.jetbrains.kotlin.cli.jvm.compiler.legacy.pipeline.JvmCompilerPipelineKt.convertToIrAndActualizeForJvm(jvmCompilerPipeline.kt:108)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFir2IrPipelinePhase.executePhase(JvmFir2IrPipelinePhase.kt:26)
	at org.jetbrains.kotlin.cli.pipeline.jvm.JvmFir2IrPipelinePhase.executePhase(JvmFir2IrPipelinePhase.kt:17)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:68)
	at org.jetbrains.kotlin.cli.pipeline.PipelinePhase.phaseBody(PipelinePhase.kt:58)
	at org.jetbrains.kotlin.config.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:215)
	at org.jetbrains.kotlin.config.phaser.NamedCompilerPhase.invoke(CompilerPhase.kt:111)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:28)
	at org.jetbrains.kotlin.config.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.runPhasedPipeline(AbstractCliPipeline.kt:106)
	at org.jetbrains.kotlin.cli.pipeline.AbstractCliPipeline.execute(AbstractCliPipeline.kt:65)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:61)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecutePhased(K2JVMCompiler.kt:36)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:80)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:337)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:466)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:75)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:514)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:431)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:310)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:137)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:678)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1805)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:598)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:844)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:721)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:720)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.IllegalStateException: Serializer for element of type party.morino.moripafishing.api.core.fishing.ApplyValue has not been found
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializerSearchUtilKt.findTypeSerializerOrContext(SerializerSearchUtil.kt:85)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.serializerInstance(BaseIrGenerator.kt:715)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.serializerInstance$instantiate(BaseIrGenerator.kt:548)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.serializerInstance(BaseIrGenerator.kt:591)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.cacheableChildSerializerInstance(BaseIrGenerator.kt:482)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.createCachedChildSerializers(BaseIrGenerator.kt:469)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator.<init>(SerializableIrGenerator.kt:60)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator$Companion.generate(SerializableIrGenerator.kt:399)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:146)
	... 63 more


